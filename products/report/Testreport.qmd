---
title: "Course Test Run"
author: "Lukas Baumann"
date: today
format:
  html:
    toc: true
    embed-resources: true
---

```{r}
#| output: false
#| echo: false
library(tidyverse)
```

## Creating functions for future financial projections

With a lot of ChatGPT-help i tried to work out a function projecting financial details of a real estate financing (total-depth and percentage of depth to own assets). I am absolutely not the financial guy over here and have little experience in function creation... just wanted to do something i never did. Nevertheless, one might argue this makes little sense when running to AI for help. But rather than going down this philosophical sinkhole i show some overly simple graphs about cash - Enjoy!

# Creating Function

First i add the function allowing for calculation of future data projections.

```{r}
#| echo: false
project_financials <- function(own_capital, total_debt, interest_rate, amortization_rate, years) {
  equity <- numeric(length = years)
  debt <- numeric(length = years)
  mortgage_payments <- numeric(length = years)
  amortization_payments <- numeric(length = years)
  
  equity[1] <- own_capital
  debt[1] <- total_debt
  amortization_payments[1] <- total_debt*amortization_rate
  mortgage_payments[1] <- total_debt* interest_rate
  
  for (i in 2:years) {
    mortgage_payments[i] <- debt[1] * interest_rate
    equity[i] <- equity[1]
    debt[i] <- debt[i - 1] - amortization_payments[i-1]
    amortization_payments[i] <- debt[i] * amortization_rate
  }
  
  result <- data.frame(
    Year = 1:years,
    Eigenkapital = equity,
    Fremdkapital = debt,
    Jaehrliche_Zinszahlung = mortgage_payments,
    Jaehrliche_Amortisationszahlung = amortization_payments
  )
  
  return(result)
}

```

Nah, just kidding. Here it is:

```{r}
project_financials <- function(own_capital, total_debt, interest_rate, amortization_rate, years) {
  equity <- numeric(length = years)
  debt <- numeric(length = years)
  mortgage_payments <- numeric(length = years)
  amortization_payments <- numeric(length = years)
  
  equity[1] <- own_capital
  debt[1] <- total_debt
  amortization_payments[1] <- total_debt*amortization_rate
  mortgage_payments[1] <- total_debt* interest_rate
  
  for (i in 2:years) {
    mortgage_payments[i] <- debt[1] * interest_rate
    equity[i] <- equity[1]
    debt[i] <- debt[i - 1] - amortization_payments[i-1]
    amortization_payments[i] <- debt[i] * amortization_rate
  }
  
  result <- data.frame(
    Year = 1:years,
    Eigenkapital = equity,
    Fremdkapital = debt,
    Jaehrliche_Zinszahlung = mortgage_payments,
    Jaehrliche_Amortisationszahlung = amortization_payments
  )
  
  return(result)
}
```

# Inventing Data

Now i present to you the fruits of work with a freshly invented data-table woth a financial-projection of the next 20 years:

```{r}
#| label: Financial-projection
#| echo: false
# Example usage:
own_capital <- 50000  # Eigenkapital
total_debt <- 200000  # Fremdkapital
interest_rate <- 0.01  # Annual interest rate
amortization_rate <- 0.05  # Annual amortization rate
years <- 20  # Number of years for projection

financial_projection <- project_financials(own_capital, total_debt, interest_rate, amortization_rate, years) 
financial_projection <- financial_projection %>% 
  mutate(Fremdverschuldung = Fremdkapital / (Eigenkapital + Fremdkapital))

print(financial_projection %>% 
        rename(Jahr = Year, Amortisation = Jaehrliche_Amortisationszahlung, Zinsen = Jaehrliche_Zinszahlung, Eigenkapital = Eigenkapital, Fremdkapital = Fremdkapital))

```

# Baking

Now to finish the magic i will bake some graphs! @Fremdkapital will show you the yearly total debth values for the imaginary real estate deal, after yearly deduction of amortization payments

```{r}
#| label: Fremdkapital
#| fig-cap: "Projeziertes jährliches Fremdkapital über die nächsen X Jahre"
#| echo: false
ggplot(financial_projection %>% 
  pivot_longer(cols = 2:3, values_to = "Kapital", names_to = "Kapitalherkunft")) +
  geom_area(aes(x = Year, y = Kapital, fill = Kapitalherkunft)) +
  theme_classic() 
```

Now the plot @Femdverschuldung2 shows "Fremd-" and "Eigenkapital" not stacked but ovarlayed:

```{r}
#| label: Fremdverschuldung2 
#| fig-cap: "Projezierte jährliche Kapitalzusammensetzung über die nächsen X Jahre"
#| echo: false
ggplot(data = financial_projection) +
  geom_area(aes(x = Year, y = Fremdkapital), fill = "pink") +
  geom_area(aes(x = Year, y = Eigenkapital), fill = "blue") +
  geom_text(aes(label = "Pink = Fremdkapital"), x = 15, y = 120000, color = "pink") +
  geom_text(aes(label = "Blue = Eigenkapital"), x = 15, y = 110000, color = "blue") +
  theme_classic() 
```

And last a the percentage of Fremdverschuldung per total investments in @Fremdverschluldung3

```{r}
#| label: Fremdverschuldung3 
#| fig-cap: "Projezierte jährliche Fremdverschuldung über die nächsen X Jahre"
#| echo: false
ggplot(data = financial_projection) +
  geom_line(aes(x = Year, y = Fremdverschuldung), color = "pink") +
  scale_y_continuous(labels = scales::label_percent()) +
  theme_classic()
```
# Doing the actual assignment
Lastly i added a short evaluation of the ebola dataset;
```{r}
#| echo: false
#| output: false
#| warning: false
ebodat <- read_csv("https://raw.githubusercontent.com/ISPMBern/projects-in-R/main/data/raw/ebola.csv")

```

I was interested in daily new ebola cases, which i firstly need to calculate from the dataset as only cumulative cases are reported.
```{r}
#| output: false
ebodat2 <-  ebodat %>% 
  select(Country, Date, Cum_conf_cases) %>% 
  filter(Country %in% c("Guinea", "Liberia", "Sierra Leone")) %>% 
  filter(Date < "2015-03-31") %>% 
  group_by(Country) %>% 
  arrange(Country, Date) %>% 
  mutate(Cum_conf_cases_diff = Cum_conf_cases - lag(Cum_conf_cases)) %>% 
  ungroup()
```

Then i plot daily new ebola-cases in @ebolacases below, grouped by countries. In this graph higher infection numbers in Sierra Leone are mostly aparent. There are two outliers - one very high and one negative value for Liberia. These are likly data errors.
```{r}
#| echo: false
#| warning: false
#| label: ebolacases
ggplot(ebodat2, mapping = aes(x = Date, y = Cum_conf_cases_diff)) +
  geom_point(aes(group = Country, color = Country)) +
  labs(x = "Date", y = "New Cases")+
  theme_classic()
```

